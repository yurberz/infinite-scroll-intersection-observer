{"version":3,"sources":["InfiniteScroll.js","App.js","index.js"],"names":["Div","styled","div","allData","Array","fill","map","_val","i","types","reducer","state","action","type","loading","data","newData","more","length","after","Error","MyContext","createContext","MyProvider","children","useReducer","dispatch","Provider","value","load","setTimeout","slice","App","useContext","loader","useRef","observer","IntersectionObserver","entries","isIntersecting","current","threshold","useState","element","setElement","useEffect","currentElement","currentObserver","observe","unobserve","row","ref","InfiniteScroll","ReactDOM","render","document","getElementById"],"mappings":"+RAGMA,EAAMC,IAAOC,IAAV,+OAiBHC,EAAU,IAAIC,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAMC,GAAP,OAAaA,EAAI,KAIrDC,EACG,QADHA,EAEI,SAGJC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKJ,EACH,OAAO,2BAAKE,GAAZ,IAAmBG,SAAS,IAC9B,KAAKL,EACH,OAAO,2BACFE,GADL,IAEEG,SAAS,EACTC,KAAK,GAAD,mBAAMJ,EAAMI,MAAZ,YAAqBH,EAAOI,UAChCC,KAhBQ,KAgBFL,EAAOI,QAAQE,OACrBC,MAAOR,EAAMQ,MAAQP,EAAOI,QAAQE,SAExC,QACE,MAAM,IAAIE,MAAM,6BAIhBC,EAAYC,0BAEZC,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACTC,qBAAWf,EAAS,CAC5CI,SAAS,EACTG,MAAM,EACNF,KAAM,GACNI,MAAO,IAL0B,mBAC5BR,EAD4B,KACrBe,EADqB,KAQ3BZ,EAA+BH,EAA/BG,QAASC,EAAsBJ,EAAtBI,KAAMI,EAAgBR,EAAhBQ,MAAOF,EAASN,EAATM,KAW9B,OAAO,cAACI,EAAUM,SAAX,CAAoBC,MAAO,CAAEd,UAASC,OAAME,OAAMY,KAT5C,WACXH,EAAS,CAAEb,KAAMJ,IAEjBqB,YAAW,WACT,IAAMd,EAAUb,EAAQ4B,MAAMZ,EAAOA,EAxC3B,IAyCVO,EAAS,CAAEb,KAAMJ,EAAcO,cAC9B,OAGE,SAA2DQ,KAG9DQ,EAAM,WAAO,IAAD,EACsBC,qBAAWZ,GAAzCN,EADQ,EACRA,KAAMD,EADE,EACFA,QAASG,EADP,EACOA,KAAMY,EADb,EACaA,KAEvBK,EAASC,iBAAON,GAEhBO,EAAWD,iBACf,IAAIE,sBACF,SAACC,GACeA,EAAQ,GACZC,gBACRL,EAAOM,YAGX,CAAEC,UAAW,KAbD,EAiBcC,mBAAS,MAjBvB,mBAiBTC,EAjBS,KAiBAC,EAjBA,KAsChB,OAnBAC,qBAAU,WACRX,EAAOM,QAAUX,IAChB,CAACA,IAEJgB,qBAAU,WACR,IAAMC,EAAiBH,EACjBI,EAAkBX,EAASI,QAMjC,OAJIM,GACFC,EAAgBC,QAAQF,GAGnB,WACDA,GACFC,EAAgBE,UAAUH,MAG7B,CAACH,IAGF,eAAC3C,EAAD,WACE,6BACGe,EAAKT,KAAI,SAAC4C,GAAD,OACR,6BAAeA,GAANA,SAGXpC,GAAWG,GAAQ,qBAAKkC,IAAKP,IAC9B9B,GAAW,+CAMH,aACb,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCvHSkB,EAJH,WACV,OAAO,cAACoB,EAAD,KCETC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.410c662f.chunk.js","sourcesContent":["import { useState, useEffect, useReducer, useContext, useRef, createContext } from \"react\";\nimport styled from \"styled-components\";\n\nconst Div = styled.div`\n  margin: 0 auto;\n  max-width: 600px;\n\n  li {\n    padding: 16px;\n    margin: 16px;\n    min-height: 100px;\n    background-color: salmon;\n  }\n\n  span {\n    display: block;\n    padding: 16px 0px;\n  }\n`;\n\nconst allData = new Array(45).fill(0).map((_val, i) => i + 1);\n\nconst perPage = 10;\n\nconst types = {\n  start: \"START\",\n  loaded: \"LOADED\",\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case types.start:\n      return { ...state, loading: true };\n    case types.loaded:\n      return {\n        ...state,\n        loading: false,\n        data: [...state.data, ...action.newData],\n        more: action.newData.length === perPage,\n        after: state.after + action.newData.length,\n      };\n    default:\n      throw new Error(\"Don't understand action\");\n  }\n};\n\nconst MyContext = createContext();\n\nconst MyProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, {\n    loading: false,\n    more: true,\n    data: [],\n    after: 0,\n  });\n\n  const { loading, data, after, more } = state;\n\n  const load = () => {\n    dispatch({ type: types.start });\n\n    setTimeout(() => {\n      const newData = allData.slice(after, after + perPage);\n      dispatch({ type: types.loaded, newData });\n    }, 300);\n  };\n\n  return <MyContext.Provider value={{ loading, data, more, load }}>{children}</MyContext.Provider>;\n};\n\nconst App = () => {\n  const { data, loading, more, load } = useContext(MyContext);\n\n  const loader = useRef(load);\n\n  const observer = useRef(\n    new IntersectionObserver(\n      (entries) => {\n        const first = entries[0];\n        if (first.isIntersecting) {\n          loader.current();\n        }\n      },\n      { threshold: 1 }\n    )\n  );\n\n  const [element, setElement] = useState(null);\n\n  useEffect(() => {\n    loader.current = load;\n  }, [load]);\n\n  useEffect(() => {\n    const currentElement = element;\n    const currentObserver = observer.current;\n\n    if (currentElement) {\n      currentObserver.observe(currentElement);\n    }\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  }, [element]);\n\n  return (\n    <Div>\n      <ul>\n        {data.map((row) => (\n          <li key={row}>{row}</li>\n        ))}\n      </ul>\n      {!loading && more && <div ref={setElement}></div>}\n      {loading && <p>Loading...</p>}\n    </Div>\n  );\n};\n\n// eslint-disable-next-line\nexport default () => {\n  return (\n    <MyProvider>\n      <App />\n    </MyProvider>\n  );\n};\n","import InfiniteScroll from \"./InfiniteScroll\";\n\nconst App = () => {\n  return <InfiniteScroll />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}